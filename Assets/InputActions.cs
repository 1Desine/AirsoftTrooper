//------------------------------------------------------------------------------
// <auto-generated>
//     This code was auto-generated by com.unity.inputsystem:InputActionCodeGenerator
//     version 1.7.0
//     from Assets/InputActions.inputactions
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using System.Collections;
using System.Collections.Generic;
using UnityEngine.InputSystem;
using UnityEngine.InputSystem.Utilities;

public partial class @InputActions: IInputActionCollection2, IDisposable
{
    public InputActionAsset asset { get; }
    public @InputActions()
    {
        asset = InputActionAsset.FromJson(@"{
    ""name"": ""InputActions"",
    ""maps"": [
        {
            ""name"": ""Trooper"",
            ""id"": ""9aa60e32-9f1f-4b91-8313-4bba977d22f1"",
            ""actions"": [
                {
                    ""name"": ""MoveV2N"",
                    ""type"": ""Value"",
                    ""id"": ""81a144c1-e09d-4a51-be57-68e7dcfc3dc8"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": ""Normalize"",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""LookV2D"",
                    ""type"": ""Value"",
                    ""id"": ""ff512620-8f11-4677-9f18-ff0ce8e14127"",
                    ""expectedControlType"": ""Vector2"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": true
                },
                {
                    ""name"": ""Jump"",
                    ""type"": ""Button"",
                    ""id"": ""8c874be1-649d-4989-8dd1-818e668fc633"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Fire"",
                    ""type"": ""Button"",
                    ""id"": ""31fb66a6-c60c-418f-94ee-1d19460b4e24"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                },
                {
                    ""name"": ""Reload"",
                    ""type"": ""Button"",
                    ""id"": ""c924967c-65c4-46c4-8775-fbc7d51ec290"",
                    ""expectedControlType"": ""Button"",
                    ""processors"": """",
                    ""interactions"": """",
                    ""initialStateCheck"": false
                }
            ],
            ""bindings"": [
                {
                    ""name"": ""2D Vector"",
                    ""id"": ""3024b66b-664e-4163-8278-8305ddc7ef6d"",
                    ""path"": ""2DVector"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveV2N"",
                    ""isComposite"": true,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": ""up"",
                    ""id"": ""9ff88985-433b-42a6-b1dd-8778e279ccfc"",
                    ""path"": ""<Keyboard>/w"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveV2N"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""down"",
                    ""id"": ""73a8eaf2-c2f3-4c8e-b037-fd9d291b2bc0"",
                    ""path"": ""<Keyboard>/s"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveV2N"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""left"",
                    ""id"": ""5022da23-9d5c-4805-af71-b5bea379d8ee"",
                    ""path"": ""<Keyboard>/a"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveV2N"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": ""right"",
                    ""id"": ""736326aa-4bdd-4376-8341-b7370e37d556"",
                    ""path"": ""<Keyboard>/d"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""MoveV2N"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": true
                },
                {
                    ""name"": """",
                    ""id"": ""104d4377-219d-42ef-b2ec-8a60d20d3408"",
                    ""path"": ""<Mouse>/delta"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""LookV2D"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""76c8adc3-8981-4271-b509-b023790dfd09"",
                    ""path"": ""<Keyboard>/space"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Jump"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""751fb1b3-5087-4287-8fa8-e395dda3761d"",
                    ""path"": ""<Keyboard>/r"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Reload"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                },
                {
                    ""name"": """",
                    ""id"": ""d99a1bab-028a-4c23-9553-5327b7d32c33"",
                    ""path"": ""<Mouse>/leftButton"",
                    ""interactions"": """",
                    ""processors"": """",
                    ""groups"": """",
                    ""action"": ""Fire"",
                    ""isComposite"": false,
                    ""isPartOfComposite"": false
                }
            ]
        }
    ],
    ""controlSchemes"": []
}");
        // Trooper
        m_Trooper = asset.FindActionMap("Trooper", throwIfNotFound: true);
        m_Trooper_MoveV2N = m_Trooper.FindAction("MoveV2N", throwIfNotFound: true);
        m_Trooper_LookV2D = m_Trooper.FindAction("LookV2D", throwIfNotFound: true);
        m_Trooper_Jump = m_Trooper.FindAction("Jump", throwIfNotFound: true);
        m_Trooper_Fire = m_Trooper.FindAction("Fire", throwIfNotFound: true);
        m_Trooper_Reload = m_Trooper.FindAction("Reload", throwIfNotFound: true);
    }

    public void Dispose()
    {
        UnityEngine.Object.Destroy(asset);
    }

    public InputBinding? bindingMask
    {
        get => asset.bindingMask;
        set => asset.bindingMask = value;
    }

    public ReadOnlyArray<InputDevice>? devices
    {
        get => asset.devices;
        set => asset.devices = value;
    }

    public ReadOnlyArray<InputControlScheme> controlSchemes => asset.controlSchemes;

    public bool Contains(InputAction action)
    {
        return asset.Contains(action);
    }

    public IEnumerator<InputAction> GetEnumerator()
    {
        return asset.GetEnumerator();
    }

    IEnumerator IEnumerable.GetEnumerator()
    {
        return GetEnumerator();
    }

    public void Enable()
    {
        asset.Enable();
    }

    public void Disable()
    {
        asset.Disable();
    }

    public IEnumerable<InputBinding> bindings => asset.bindings;

    public InputAction FindAction(string actionNameOrId, bool throwIfNotFound = false)
    {
        return asset.FindAction(actionNameOrId, throwIfNotFound);
    }

    public int FindBinding(InputBinding bindingMask, out InputAction action)
    {
        return asset.FindBinding(bindingMask, out action);
    }

    // Trooper
    private readonly InputActionMap m_Trooper;
    private List<ITrooperActions> m_TrooperActionsCallbackInterfaces = new List<ITrooperActions>();
    private readonly InputAction m_Trooper_MoveV2N;
    private readonly InputAction m_Trooper_LookV2D;
    private readonly InputAction m_Trooper_Jump;
    private readonly InputAction m_Trooper_Fire;
    private readonly InputAction m_Trooper_Reload;
    public struct TrooperActions
    {
        private @InputActions m_Wrapper;
        public TrooperActions(@InputActions wrapper) { m_Wrapper = wrapper; }
        public InputAction @MoveV2N => m_Wrapper.m_Trooper_MoveV2N;
        public InputAction @LookV2D => m_Wrapper.m_Trooper_LookV2D;
        public InputAction @Jump => m_Wrapper.m_Trooper_Jump;
        public InputAction @Fire => m_Wrapper.m_Trooper_Fire;
        public InputAction @Reload => m_Wrapper.m_Trooper_Reload;
        public InputActionMap Get() { return m_Wrapper.m_Trooper; }
        public void Enable() { Get().Enable(); }
        public void Disable() { Get().Disable(); }
        public bool enabled => Get().enabled;
        public static implicit operator InputActionMap(TrooperActions set) { return set.Get(); }
        public void AddCallbacks(ITrooperActions instance)
        {
            if (instance == null || m_Wrapper.m_TrooperActionsCallbackInterfaces.Contains(instance)) return;
            m_Wrapper.m_TrooperActionsCallbackInterfaces.Add(instance);
            @MoveV2N.started += instance.OnMoveV2N;
            @MoveV2N.performed += instance.OnMoveV2N;
            @MoveV2N.canceled += instance.OnMoveV2N;
            @LookV2D.started += instance.OnLookV2D;
            @LookV2D.performed += instance.OnLookV2D;
            @LookV2D.canceled += instance.OnLookV2D;
            @Jump.started += instance.OnJump;
            @Jump.performed += instance.OnJump;
            @Jump.canceled += instance.OnJump;
            @Fire.started += instance.OnFire;
            @Fire.performed += instance.OnFire;
            @Fire.canceled += instance.OnFire;
            @Reload.started += instance.OnReload;
            @Reload.performed += instance.OnReload;
            @Reload.canceled += instance.OnReload;
        }

        private void UnregisterCallbacks(ITrooperActions instance)
        {
            @MoveV2N.started -= instance.OnMoveV2N;
            @MoveV2N.performed -= instance.OnMoveV2N;
            @MoveV2N.canceled -= instance.OnMoveV2N;
            @LookV2D.started -= instance.OnLookV2D;
            @LookV2D.performed -= instance.OnLookV2D;
            @LookV2D.canceled -= instance.OnLookV2D;
            @Jump.started -= instance.OnJump;
            @Jump.performed -= instance.OnJump;
            @Jump.canceled -= instance.OnJump;
            @Fire.started -= instance.OnFire;
            @Fire.performed -= instance.OnFire;
            @Fire.canceled -= instance.OnFire;
            @Reload.started -= instance.OnReload;
            @Reload.performed -= instance.OnReload;
            @Reload.canceled -= instance.OnReload;
        }

        public void RemoveCallbacks(ITrooperActions instance)
        {
            if (m_Wrapper.m_TrooperActionsCallbackInterfaces.Remove(instance))
                UnregisterCallbacks(instance);
        }

        public void SetCallbacks(ITrooperActions instance)
        {
            foreach (var item in m_Wrapper.m_TrooperActionsCallbackInterfaces)
                UnregisterCallbacks(item);
            m_Wrapper.m_TrooperActionsCallbackInterfaces.Clear();
            AddCallbacks(instance);
        }
    }
    public TrooperActions @Trooper => new TrooperActions(this);
    public interface ITrooperActions
    {
        void OnMoveV2N(InputAction.CallbackContext context);
        void OnLookV2D(InputAction.CallbackContext context);
        void OnJump(InputAction.CallbackContext context);
        void OnFire(InputAction.CallbackContext context);
        void OnReload(InputAction.CallbackContext context);
    }
}
